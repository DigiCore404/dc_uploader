name: Re-publish Docker Image

on:
  pull_request:
    types:
      - closed
    paths:
      - Dockerfile
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  publish_docker:
    if: ${{ github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set IMAGE_NAME to lowercase
        run: echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Determine latest tag
        id: get-latest-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag: $LATEST_TAG"
          echo "tag_name=$LATEST_TAG" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: |
          git checkout ${{ env.tag_name }}
          echo "Checked out the latest tag: ${{ env.tag_name }}"

      - name: Verify Git state
        run: |
          echo "Checked out commit: $(git rev-parse HEAD)"
          echo "Target commitish: ${{ env.tag_name }}"

      - name: Overwrite Dockerfile with the latest version from main
        run: |
          git fetch origin main
          git checkout origin/main -- Dockerfile
          echo "Updated Dockerfile to the latest version from the main branch"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-e7d05fdb02a52b0a
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and push lastest and version tag
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.tag_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Generate artifact attestation
      - name: Generate artifact attestation
        id: attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Rename attestation tag with .attestation suffix
        run: |
          DIGEST=$(echo "${{ steps.push.outputs.digest }}" | cut -d':' -f2)
          SOURCE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:sha256-${DIGEST}"
          TARGET_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:sha256-${DIGEST}.attestation"
          docker buildx imagetools create --tag $TARGET_TAG $SOURCE_TAG || true
          
          # Delete the original tag
          curl -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.package.v1+json" \
            "https://api.github.com/user/packages/container/${{ env.IMAGE_NAME }}/versions/$(echo $DIGEST | cut -c1-12)" || \
            echo "Failed to delete original tag, but .sig tag was created"