name: Release Automation

on:
  release:
    types:
      - published
# Defines two custom environment variables for the workflow. These are used for the Container registry domain,
# and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

jobs:
  create-and-attach-tarball:
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write

    steps:
      - name: Set IMAGE_NAME to lowercase
        run: echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create tarball excluding specific files
        run: |
          RELEASE_NAME="dc_uploader-${{ github.event.release.tag_name }}"
          cd ..
          tar --exclude='Dockerfile' \
              --exclude='README.md' \
              --exclude='LICENSE' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='.devcontainer' \
              --exclude='__pycache__' \
              --exclude='utils/__pycache__' \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='.dockerignore' \
              -czf "/tmp/dc_uploader-${{ github.event.release.tag_name }}.tar.gz" dc_uploader

      - name: Upload tarball to release
        uses: softprops/action-gh-release@v2
        with:
          files: /tmp/dc_uploader-${{ github.event.release.tag_name }}.tar.gz

  publish_docker:
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-e7d05fdb02a52b0a
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Generate artifact attestation
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Add attestation tag to attestation image
        run: |
          DIGEST=$(echo "${{ steps.push.outputs.digest }}" | cut -d':' -f2)
          SOURCE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:sha256-${DIGEST}"
          TARGET_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest-sig"
          docker buildx imagetools create --tag $TARGET_TAG $SOURCE_TAG